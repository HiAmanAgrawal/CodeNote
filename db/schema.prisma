// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  contests      Contest[]
  submissions   Submission[]
  preferences   UserPreferences?
  contestParticipants ContestParticipant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Role enum
enum Role {
  ADMIN
  USER
}

// Existing Models
model Note {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  topic       String
  difficulty  String
  tags        String[]
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contest {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  startTime   DateTime
  endTime     DateTime
  isActive    Boolean  @default(true)
  maxParticipants Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions Submission[]
  problems    Problem[]
  participants ContestParticipant[]
}

model Submission {
  id        String   @id @default(cuid())
  code      String   @db.Text
  language  String
  status    String   @default("pending")
  score     Int?
  feedback  String?  @db.Text
  submittedAt DateTime @default(now())
  userId    String
  contestId String
  problemId String
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                String @id @default(cuid())
  userId            String @unique
  theme             String @default("light")
  language          String @default("en")
  notifications     Boolean @default(true)
  emailNotifications Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Problem {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  difficulty    String
  topic         String
  constraints   String[]
  examples      Json[]
  starterCode   Json
  solutionCode  Json
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  submissions   Submission[]
  contests      Contest[]
}

model ContestParticipant {
  id        String   @id @default(cuid())
  contestId String
  userId    String
  score     Int      @default(0)
  rank      Int?
  name      String?
  joinedAt  DateTime @default(now())
  
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([contestId, userId])
}
